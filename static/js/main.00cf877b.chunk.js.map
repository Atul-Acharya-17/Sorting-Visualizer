{"version":3,"sources":["logo.svg","components/navbar.jsx","components/bars.jsx","algorithms/bubbleSort.js","algorithms/selectionSort.js","algorithms/insertionSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/heapSort.js","algorithms/bucketSort.js","components/window.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","onClick","this","onReset","type","onBubble","onSelection","onInsertion","onMerge","onQuick","onHeap","onBucket","Component","Bars","array","map","value","idx","style","height","bubbleSort","comparisons","i","length","j","temp","push","selectionSort","animations","minPos","insertionSort","secondColor","mergeSort","recursiveMerge","start","end","mid","Math","floor","x","y","element","firstColor","quickSort","recursiveSort","pivotIndex","pivot","smallestIndex","heapSort","heap","heapify","createHeap","slot","console","log","k","limit","leftChild","rightChild","largerChild","bucketSort","max","numberOfBuckets","sqrt","bucketIndexes","pos","id","ceil","bucketId","Window","state","sort","handleReset","shuffleArray","setState","random","createaAnimations","arrayBars","multiplier","index1","index2","color","height1","height2","barOneStyle","barTwoStyle","setTimeout","backgroundColor","handleBubble","document","getElementsByClassName","handleSelection","handleInsertion","handleMerge","handleQuick","handleHeap","handleBucket","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00cf877b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport './navbar.css'\r\n\r\nclass Navbar extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    render() { \r\n        return (\r\n            <nav className=\"nav-bar\">\r\n                <form className=\"form-inline\">\r\n                    <button onClick = {this.props.onReset} className=\"btn btn-outline-primary m-4\" type=\"button\">Generate New Array</button>\r\n                    <button onClick = {this.props.onBubble} className=\"btn btn-outline-success m-3\" type=\"button\">Bubble Sort</button>\r\n                    <button onClick = {this.props.onSelection} className=\"btn btn-outline-success m-3\" type=\"button\">Selection Sort</button>\r\n                    <button onClick = {this.props.onInsertion} className=\"btn btn-outline-success m-3\" type=\"button\">Insertion Sort</button>\r\n                    <button onClick = {this.props.onMerge} className=\"btn btn-outline-success m-3\" type=\"button\">Merge Sort</button>\r\n                    <button onClick = {this.props.onQuick} className=\"btn btn-outline-success m-3\" type=\"button\">Quick Sort</button>\r\n                    <button onClick = {this.props.onHeap} className=\"btn btn-outline-success m-3\" type=\"button\">Heap Sort</button>\r\n                    <button onClick = {this.props.onBucket} className=\"btn btn-outline-success m-3\" type=\"button\">Bucket Sort</button>\r\n                </form>\r\n            </nav>\r\n\r\n        );\r\n    }\r\n}\r\n \r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport './bars.css';\r\n\r\nclass Bars extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n    }\r\n    render() { \r\n        return (\r\n            <div className=\"array-container\">\r\n                {this.props.array.map((value, idx) =>\r\n                (<div className=\"array-bar\" key={idx} style = {{height:`${value}px`}}>\r\n                  </div>  ))}\r\n            </div> );\r\n    }\r\n}\r\n \r\nexport default Bars;","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function bubbleSort(array){\r\n    let comparisons = [];\r\n    for (let i=0; i< array.length-1; ++i){\r\n        for (let j=0; j< array.length - 1 - i; ++j){\r\n            if (array[j] > array[j+1]){\r\n                let temp = array[j+1];\r\n                array[j+1] = array[j];\r\n                array[j] = temp;\r\n                comparisons.push([j, j+1, firstColor, array[j], array[j+1]]);\r\n                comparisons.push([j, j+1, secondColor, array[j], array[j+1]]);\r\n            }\r\n        }\r\n    }\r\n    return comparisons\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function selectionSort(array){\r\n    const animations = [];\r\n    for (let i = 0; i < array.length; ++i) {\r\n        let minPos = i;\r\n        for (let j = i+1; j<array.length; ++j){\r\n            if (array[j] < array[minPos]){\r\n                minPos = j;\r\n            }\r\n        }\r\n        let temp = array[i];\r\n        array[i] = array[minPos];\r\n        array[minPos] = temp;\r\n\r\n        animations.push([i, minPos, firstColor, array[i], array[minPos]]);\r\n        animations.push([i, minPos, secondColor, array[i], array[minPos]]);\r\n    }\r\n    return animations;\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function insertionSort(array){\r\n\r\n    const animations = [];\r\n\r\n    for (let i=1; i<array.length; ++i){\r\n        for (let j=i; j>=0; --j){\r\n            if (array[j-1] > array[j]) {\r\n                let temp = array[j];\r\n                array[j] = array[j-1];\r\n                array[j-1] = temp;\r\n                animations.push([j-1, j, firstColor, array[j-1], array[j]]);\r\n                animations.push([j-1, j, secondColor, array[j-1], array[j]]);\r\n            }\r\n            else{\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function mergeSort(array){\r\n    const animations = [];\r\n    recursiveMerge(array, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\n\r\nfunction recursiveMerge (array, start, end, animations) {\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n    else{\r\n        let mid = Math.floor((start + end) / 2);\r\n        recursiveMerge(array, start, mid, animations );\r\n        recursiveMerge(array, mid + 1, end, animations);\r\n\r\n        let x = start;\r\n        let y = mid + 1;\r\n        while (x <= mid && y <= end){\r\n            animations.push([x, y, firstColor, array[x], array[y]]);\r\n            animations.push([x, y, secondColor, array[x], array[y]]);\r\n            if (array[x] <= array[y]) {\r\n                x++;\r\n            }\r\n            else if (array[x] > array[y]){\r\n                let element = array[y];\r\n                for (let i = y; i > x; i--){\r\n                    array[i] = array[i-1];\r\n                    animations.push([i, i-1, secondColor, array[i], array[i-1]]);\r\n                }\r\n                array[x] = element;\r\n                animations.push([x, y, secondColor, array[x], array[y]]);\r\n                x++;\r\n                mid++;\r\n                y++;\r\n            }\r\n        }   \r\n        return;\r\n    }\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function quickSort(array){\r\n    const animations = [];\r\n    recursiveSort(array, 0, array.length - 1, animations);\r\n    return animations;\r\n\r\n}\r\n\r\nfunction recursiveSort(array, start, end, animations){\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n    else {\r\n        const pivotIndex = end;\r\n        const pivot = array[pivotIndex];\r\n        let smallestIndex = start;\r\n        for(let i = start; i <= end; ++i){\r\n            if (array[i] < pivot){\r\n                let temp = array[smallestIndex];\r\n                array[smallestIndex] = array[i];\r\n                array[i] = temp;\r\n                animations.push([i, smallestIndex, firstColor, array[i], array[smallestIndex]]);\r\n                animations.push([i, smallestIndex, secondColor, array[i], array[smallestIndex]]);\r\n                smallestIndex++;\r\n            }\r\n            else{\r\n                animations.push([i, pivotIndex, firstColor, array[i], array[pivotIndex]]);\r\n                animations.push([i, pivotIndex, secondColor, array[i], array[pivotIndex]]);\r\n            }\r\n        }\r\n\r\n        array[pivotIndex] = array[smallestIndex];\r\n        array[smallestIndex] = pivot;\r\n        animations.push([pivotIndex, smallestIndex, firstColor, array[pivotIndex], array[smallestIndex]]);\r\n        animations.push([pivotIndex, smallestIndex, secondColor, array[pivotIndex], array[smallestIndex]]);\r\n\r\n        recursiveSort(array, start, smallestIndex-1, animations);\r\n        recursiveSort(array, smallestIndex+1, end, animations);\r\n    }\r\n    return;\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nexport function heapSort(array) {\r\n    let animations = []\r\n\r\n    let heap = createHeap(array, animations);\r\n\r\n    let slot = heap.length - 1;\r\n\r\n\r\n    while (slot > 0){\r\n        let temp = heap[0];\r\n        console.log(temp);\r\n        heap[0] = heap[slot];\r\n        heap[slot] = temp;\r\n        animations.push([0, slot, firstColor, array[0], heap[slot]]);\r\n        animations.push([0, slot, secondColor, array[0], heap[slot]]);\r\n        slot--;\r\n        heapify(heap, 0, slot + 1, animations);\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction createHeap(array, animations) {\r\n    for (let i = array.length - 1; i >= 0; --i){\r\n        array = heapify(array, i, array.length, animations)\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction heapify(heap, k, limit, animations) {\r\n    k = k+1  // Heap indexes start from 1\r\n\r\n    if (2*k > limit) {\r\n        return heap;\r\n    }\r\n\r\n    const leftChild = 2*k - 1;\r\n    const rightChild = 2*k;\r\n    if (rightChild + 1 > limit) {\r\n        if (heap[k- 1] < heap[leftChild]) {\r\n            let temp = heap[k - 1];\r\n            heap[k - 1] = heap[leftChild];\r\n            heap[leftChild] = temp;\r\n            animations.push([k-1, leftChild, firstColor, heap[k-1], heap[leftChild]]);\r\n            animations.push([k-1, leftChild, secondColor, heap[k-1], heap[leftChild]]);\r\n            heapify(heap, leftChild, limit, animations);\r\n        }\r\n        return heap;\r\n    }\r\n\r\n    const largerChild = heap[leftChild] > heap[rightChild] ? leftChild : rightChild;\r\n\r\n    if (heap[k - 1] < heap[largerChild]) {\r\n        let temp = heap[k - 1];\r\n        heap[k - 1] = heap[largerChild];\r\n        heap[largerChild] = temp;\r\n\r\n        animations.push([k-1, largerChild, firstColor, heap[k-1], heap[largerChild]]);\r\n        animations.push([k-1, largerChild, secondColor, heap[k-1], heap[largerChild]]);\r\n        heapify(heap, largerChild, limit, animations);\r\n    }\r\n\r\n    return heap;\r\n\r\n}","const firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\n\r\nexport function bucketSort(array){\r\n    let max = 1;\r\n\r\n    for (let i = 0; i < array.length; ++i){\r\n        if (array[i] > max){\r\n            max = array[i];\r\n        }\r\n    }\r\n    \r\n    const numberOfBuckets = Math.floor(Math.sqrt(array.length));\r\n\r\n\r\n    /* The correct way to do it\r\n    \r\n    let buckets = [];\r\n\r\n    for (let i = 0; i < numberOfBuckets; ++i){\r\n        buckets.push([]);\r\n    }\r\n\r\n    for (let i = 0; i < array.length; ++i){\r\n        let bucketNumber = Math.ceil((array[i] * numberOfBuckets) / max) - 1;\r\n        buckets[bucketNumber].push(array[i]);\r\n    }\r\n\r\n    */\r\n\r\n    let bucketIndexes = [];\r\n    let pos = 0;\r\n\r\n    let animations = [];\r\n\r\n    for (let id = 0; id < numberOfBuckets; id++){\r\n        bucketIndexes.push(pos);\r\n        for (let i = 0; i < array.length; ++i){\r\n            let bucketNumber = Math.ceil((array[i] * numberOfBuckets) / max) - 1;\r\n\r\n            if (bucketNumber === id){\r\n                let temp = array[i];\r\n                array[i] = array[pos];\r\n                array[pos] = temp;\r\n                animations.push([pos, i, firstColor, array[pos], array[i]]);\r\n                animations.push([pos, i, secondColor, array[pos], array[i]]);\r\n                pos += 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    bucketIndexes.push(array.length);\r\n    \r\n    for (let bucketId = 0; bucketId < bucketIndexes.length - 1; bucketId++){\r\n        const start = bucketIndexes[bucketId];\r\n        const end = bucketIndexes[bucketId + 1];\r\n\r\n        for (let i = start + 1; i < end; ++i){\r\n            for (let j = i; j >= start; --j){\r\n                if (array[j-1] > array[j]) {\r\n                    let temp = array[j];\r\n                    array[j] = array[j-1];\r\n                    array[j-1] = temp;\r\n                    animations.push([j - 1, j, firstColor, array[j-1], array[j]]);\r\n                    animations.push([j - 1, j, secondColor, array[j-1], array[j]]);\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return animations;\r\n\r\n}","import React, { Component } from 'react';\r\nimport Navbar from './navbar';\r\nimport Bars from './bars';\r\nimport { bubbleSort } from '../algorithms/bubbleSort';\r\nimport { selectionSort } from '../algorithms/selectionSort';\r\nimport { insertionSort } from '../algorithms/insertionSort';\r\nimport { mergeSort } from '../algorithms/mergeSort';\r\nimport { quickSort} from '../algorithms/quickSort';\r\nimport { heapSort } from '../algorithms/heapSort';\r\nimport { bucketSort } from '../algorithms/bucketSort';\r\n\r\nconst firstColor = \"red\";\r\n\r\nconst secondColor = \"#f2aa4cff\";\r\n\r\nclass Window extends Component {\r\n    state = { \r\n        array : [],\r\n        sort: true\r\n     }\r\n    render() { \r\n        return ( <div>\r\n            <Navbar \r\n                onReset = {this.handleReset}\r\n                onBubble = {this.handleBubble}\r\n                onSelection = {this.handleSelection}\r\n                onInsertion = {this.handleInsertion}\r\n                onMerge = {this.handleMerge}\r\n                onQuick = {this.handleQuick}\r\n                onHeap = {this.handleHeap}\r\n                onBucket = {this.handleBucket}\r\n            ></Navbar>\r\n            <Bars array = {this.state.array} ></Bars>\r\n            </div> \r\n            );\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleReset();\r\n    }\r\n\r\n    handleReset = () => {\r\n        let array = [];\r\n        console.log(\"Reset\");\r\n        for (let i = 0; i < 250; ++i){\r\n            array.push(i*1.5);\r\n        }\r\n        array = this.shuffleArray(array);\r\n        this.setState({array});\r\n    }\r\n\r\n    shuffleArray = (array) => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    createaAnimations = (animations, arrayBars, multiplier) => {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [index1, index2, color, height1, height2] = animations[i];\r\n            const barOneStyle = arrayBars[index1].style;\r\n            const barTwoStyle = arrayBars[index2].style;\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                if (color == secondColor) {\r\n                    barOneStyle.height = `${height1}px`;\r\n                    barTwoStyle.height = `${height2}px`;\r\n                }\r\n            }, i*multiplier);\r\n        }\r\n    }\r\n\r\n    handleBubble = () => {\r\n        console.log(\"Bubble sort\");\r\n        const animations = bubbleSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        this.createaAnimations(animations, arrayBars, 1);\r\n    }\r\n\r\n    handleSelection = () => {\r\n        console.log(\"Selection sort\");\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const animations = selectionSort(this.state.array);\r\n        this.createaAnimations(animations, arrayBars, 20);\r\n    }\r\n\r\n    handleInsertion = () => {\r\n        console.log(\"Insertion sort\");\r\n        const animations = insertionSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        this.createaAnimations(animations, arrayBars, 1);\r\n        \r\n    }\r\n\r\n    handleMerge = () => {\r\n        console.log(\"Merge sort\");\r\n        const animations = mergeSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        this.createaAnimations(animations, arrayBars, 1);\r\n    }\r\n\r\n    handleQuick = () => {\r\n        console.log(\"Quick sort\");\r\n        const animations = quickSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        this.createaAnimations(animations, arrayBars, 5);\r\n    }\r\n\r\n    handleHeap = () => {\r\n        console.log(\"Heap sort\");\r\n        const animations = heapSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        this.createaAnimations(animations, arrayBars, 5);\r\n    }\r\n\r\n    handleBucket = () => {\r\n        console.log(\"Bucket sort\");\r\n        const animations = bucketSort(this.state.array);\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        this.createaAnimations(animations, arrayBars, 5);\r\n    }\r\n\r\n}\r\n \r\nexport default Window;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Window from './components/window'\r\n\r\nfunction App() {\r\n  return (\r\n   <Window/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}